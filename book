#!/usr/bin/env python3

"""
mostly this app is to keep track of what I'm reading and reading next.
"""

import sys, os, json, re, random, copy

BOOKS_PATH = '/home/gnaughto/Private/logs/databases/books.json'
QUERYABLE_PATH = '/home/gnaughto/code/pyqueryable'

sys.path.append(QUERYABLE_PATH)
from Queryable import db_object

# globals
p    = lambda X: print( str(X) )
db   = db_object(path=BOOKS_PATH, jsonarg={'sort_keys':True,'indent':2}).load()
# arguments
op   = sys.argv[1:2]
op = '' if len(op) == 0 else op.pop().lower()
title = sys.argv[2:3]
title = '' if len(title) == 0 else title.pop()
args = sys.argv[3:]
#args = ' '.join(args) if len(args) > 0 else ''

def print_help():
    p("""Usage:
  --help, -h              show this help
  books                   show all books
  lists                   show all lists
  new [title]             add a new book
  add <title> <list>      add a book to a list
  [list name][all]        show books in a list, or all books in all lists
  finish [index][title]   mark a book 'finished reading'
  edit <title>            edit a book
  del <title|id>          delete a book
  rm <title|id> <list>    remove book from list
  listadd [name]          add a new list
""")



class book:
    title = ''
    author = ''
    added = ''
    finished = ''
    year = ''
    comments = ''
    rating = ''

    def __init__(self,title=None,author=None,added=None,finished=None,year=None,comments=None,rating=None,_id=None,_t=None):
        if title:
            self.title = title
        if author:
            self.author = author
        if added:
            self.added = added
        if finished:
            self.finished = finished
        if year:
            self.year = year
        if comments:
            self.comments = comments
        if rating:
            self.rating = rating
        if _id:
            self._id = _id

    def insert( self, db ):
        if self.check_exists(db):
            return False
        obj = {'_t':'book'}
        for i in ('title','author','added','finished','year','comments','rating'):
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        db.insert(obj)
        return True

    def check_exists( self, db ):
        obj = {'_t':'book'}
        for i in ('title','author','year'):
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        if not obj.get('title'): # not exist or unset. must have title.
            return False
        res = db.find(obj)
        return res.count() == 1

    def toString(self, index=' -', lists=[]):
        s = ''
        for i in ('title','author','added','finished','year','comments','rating'):
            e = self.__getattribute__(i)
            if e:
                s = '{}{} {:8s}: {}\n'.format(s, (index if i=='title' else ' -'), i, e)
        if lists and self._id is not None:
            list_names = []
            for lst in lists:
                if self._id in [ b['_id'] for b in lst['books'] ]:
                    list_names.append(lst['name'])
            if list_names:
                s = '{} - memberof: {}\n'.format(s, ', '.join(list_names))

        return s

    def shortString(self):
        s = ''
        for i in ('title','author','year'):
            e = self.__getattribute__(i)
            if e:
                s = '{}{}'.format( s, (' - '+e) if s else e )
        return s


def new_book( title, args ):
    obj = {'_t':'book','title':title,'added':'now()'}
    if args:
        obj['author'] = args[0]
    if len(args) > 1:
        obj['year'] = args[1]
    if len(args) > 2:
        obj['comments'] = args[2]
    for i in ('title','author','year','comments'):
        if i == 'title' and title:
            continue
        if i == 'author' and args:
            continue
        if i == 'year' and len(args) > 1:
            continue
        if i == 'comments' and len(args) > 2:
            continue
        rn = input('{} > '.format(i))
        if rn:
            obj[i] = rn

    b = book(**obj)
    if not b.title:
        p( 'error: book must have at least a title ')
        return
    if not b.insert(db):
        p('"{}" already exists'.format(title))
        return
    db.save()

    res = db.find({'title':b.title})
    if res.count() > 0:
        c = book(**res.data[0])
        p('Adding:\n{}'.format(c.toString()) )

def book_from_index_title( title ):
    try:
        index = int(title)
        res = db.find({'_t':'book'}).sort({'added':-1})
        return res.data[index-1]
    except:
        res = db.find({'_t':'book','title':title})
        if res.count() != 1:
            p('error: book must be index or title')
            return False
        return res.data[0]

def list_from_index_name( name ):
    try:
        index = int(name)
        res = db.find({'_t':'list'}).sort({'name':1})
        return res.data[index-1]
    except:
        # see if argument is a list's name
        res = db.find({'_t':'list','name':name})
        if res.count() != 1:
            p('error: list must be index or name')
            return False
        return res.data[0]

def add_book_to_list( title, args ):
    if not title:
        p( 'error: must provide a title')
        return
    if not args:
        p( 'error: must provide a list')
        return

    book_id = -1   # int
    List = {}   # dict

    # BOOK
    book = book_from_index_title( title )
    if not book:
        return
    book_id = book['_id']

    # LIST
    List = list_from_index_name( ' '.join(args) )
    if not List:
        return

    # see if the book is already in List
    for l in List['books']:
        if l['_id'] == book_id:
            p('error: "{}" is already in list "{}"'.format(book['title'],List['name']))
            return

    List['books'].append({'_id':book_id})
    db.update({'_t':'list','name':List['name']},{'$set':{'books':List['books']}})
    db.save()
    p('adding "{}" to "{}"'.format(book['title'], List['name']) )

def finish_book(title, args):
    # BOOk
    book = book_from_index_title( title )
    if not book:
        return
    book_id = book['_id']

    if 'finished' in book:
        p('"{}" already marked finished'.format(book['title']))
        if '-f' not in args:
            return
        p('-f set. forcing finish again')

    db.update({'_id':book_id},{'$set':{'finished':'now()'}})
    db.save()
    res = db.find({'_id':book_id})
    d = res.data[0]
    p( '"{}" marked finished on "{}"'.format(d['title'], d['finished']) )

def edit_book(title, args):
    # BOOk
    book = book_from_index_title( title )
    if not book:
        return

    for k in ('title','author','added','finished','year','comments','rating'):
        #for k, v in book.items():
        v = '' if k not in book else book[k]
        ans = input( '{:8} ["{}"] > '.format(k,v))
        if ans:
            book[k] = ans.lstrip().rstrip()

    sys.stdout.write('\n --> GOT:\n')

    for k, v in book.items():
        if k.startswith('_'):
            continue
        p( '{:8} "{}"'.format(k,v) )

    ans = input('replace? y/N > ')
    if ans.lower().startswith('y'):
        db.update({'_id':book['_id']},{'$set':book})
        db.save()
        res = db.find({'_id':book['_id']})
        d = res.data[0]
        p( '"{}" updated'.format(d['title']) )
    else:
        p('skipping')

def delete_book(title):
    book = book_from_index_title( title )
    if not book:
        return

    db.remove({'_t':'book', '_id':book['_id']})
    res = db.find({'_id':book['_id']})
    if res.count() == 0:
        p( book['title'] + ' removed successfully' )
    db.save()

def rm_book_from_list(title, args):
    book = book_from_index_title( title )
    if not book:
        return
    List = list_from_index_name( ' '.join(args) )
    if not List:
        return

    if book['_id'] not in [ b['_id'] for b in List['books'] ]:
        p( '"{}" not in "{}"'.format(book['title'], List['name']) )
        return

    ## remove elt
    for b in List['books']:
        if b['_id'] == book['_id']:
            List['books'].remove(b)
            break

    ## update & save
    db.update({'_id':List['_id']}, {'$set':{'books':List['books']}}).save()

    ## report
    p( 'removed "{}" from "{}"'.format(book['title'], List['name']) )

def listadd(title, args):
    ## sanity check args
    o = {'_t':'list','books':[],'name':title}
    if not title:
        rn = input('name > ')
        if rn:
            o['name'] = rn.lstrip().rstrip()

    ## empty?
    if not o.get('name'):
        p('error: list cant have empty name')
        return

    ## check if already exists
    res = db.find({'_t':'list','name':o['name']})
    if res.count() > 0:
        p('error: list "{}" already exists'.format(o['name']))
        return

    ## confirm
    yn = input('sure you want to create new list "{}" y/N? '.format(o['name']))
    if not yn.lower().startswith('y'):
        p('bailing')
        return

    ## add it & save
    db.insert(o).save()

    ## report
    p( 'create list: "{}"'.format(o['name']))


##
#
# entry point
#
#

if op == '-h' or op == '--help':
    print_help()
# show all books
elif op == 'books' or op == '-l':
    order = 1 if title == '-r' else -1
    res = db.find({'_t':'book'}).sort({'added':order})
    for i, r in enumerate(res.data):
        b = book(**r)
        if title == '-l':
            lists = db.find({'_t':'list'}).sort({'name':1})
            p(b.toString(index='{}:'.format(i+1), lists=lists.data))
        else:
            p('{}) {}'.format((i+1),b.shortString()))
# new book
elif op == 'new' or op == '-n':
    new_book( title, args )
# show lists
elif op == 'lists':
    res = db.find({'_t':'list'}).sort({'name':1})
    for i, r in enumerate(res.data):
        p('{}: {}'.format( i+1, r['name'] ) )
# add book to list
elif op == 'add' or op == '-a':
    add_book_to_list( title, args )
# mark book finished
elif op == 'finish':
    finish_book(title, args)
elif op == 'edit':
    edit_book(title, args)
elif op == 'del':
    delete_book(title)
elif op == 'rm':
    rm_book_from_list(title, args)
elif op == 'listadd':
    listadd(title, args)
else:
    # if op is a list name, show the books in the list
    found = False
    if op:
        Lists = db.find({'_t':'list'})
        for r in Lists.data:
            if r['name'] == op.lower() or op.lower() == 'all': # found it
                found = True
                p('-' * 39)
                p('+ books in "{}"'.format(r['name']))
                p('-' * 39)
                for i, b in enumerate( r['books'] ):
                    bb = db.find({'_id':b['_id']}).sort({'_id':1})
                    if bb.count():
                        bk = book(**bb.data[0])
                        p(bk.toString(index='{}:'.format(i+1), lists=Lists.data))
                if op.lower() != 'all':
                    break
        # try to match titles or authors
        if not found:
            match = re.compile('.*{}.*'.format(op), re.IGNORECASE)
            res = db.find({'_t':'book', '$or':[{'title':match},{'author':match}]})
            for i, bk in enumerate([book(**b) for b in res.data]):
                p(bk.toString(index='{}:'.format(i+1), lists=Lists.data))
            if res.data:
                found = True
    else:
        print_help()
