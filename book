#!/usr/bin/env python3

"""
mostly this app is to keep track of what I'm reading and reading next.
"""

import sys, os, json, re, random, copy

BOOKS_PATH = '/home/gnaughto/Private/logs/databases/books.json'
QUERYABLE_PATH = '/home/gnaughto/code/pyqueryable'

sys.path.append(QUERYABLE_PATH)
from Queryable import db_object

# globals
p    = lambda X: print( str(X) )
db   = db_object(path=BOOKS_PATH, jsonarg={'sort_keys':True,'indent':2}).load()
# arguments
op   = sys.argv[1:2]
op = '' if len(op) == 0 else op.pop().lower()
title = sys.argv[2:3]
title = '' if len(title) == 0 else title.pop()
args = sys.argv[3:]


def print_help():
    p("""
Usage:
  --help, -h              show this help
  books, -l [-l][-r]      show all books (-l long format, -r reverse order)
  lists                   show all lists
  new, -n [title]         add a new book
  add, -a <title> <list>  add a book to a list
  [list name][all]        show books in a list, or all books in all lists
  finish [index][title]   mark a book 'finished reading'
  edit <title>            edit a book
  del <title|id>          delete a book
  rm <title|id> <list>    remove book from list
  listadd [name]          add a new list
  listchange [name]       change list name
  unlisted                show books not in any list
  finished                show books that are finished

If no command arguments are found:
  book will try to match one or more a list names and print the intersection of
  the books contained in those lists. Fail that, it will try to print any books
  with matching author or title.
""")


def print_book( i, book, longprint, Lists ):
    if longprint:
        p(book.toString(index='{}:'.format(i+1), lists=Lists.data))
    else:
        p('{}: {}'.format((i+1), book.shortString()))

def print_list( r, backwards, longprint, Lists ):
    p('-' * 39)
    p('+ books in "{}"'.format(r['name']))
    p('-' * 39)
    generator = reversed(r['books']) if backwards else r['books']
    for i, b in enumerate( generator ):
        bb = db.find({'_id':b['_id']})
        if bb.count():
            bk = Book(**bb.data[0])
            print_book( i, bk, longprint, Lists )

def show_all_books( title, args ):
    order = -1 if title == '-r' or '-r' in args else 1
    res = db.find({'_t':'book'}).sort({'added':order})
    lists = db.find({'_t':'list'}).sort({'name':1})
    longprint = True if title == '-l' or '-l' in args else False

    for index, book in ((i, Book(**r)) for i, r in enumerate(res.data)):
        print_book( index, book, longprint, lists )


# object equal
def objeq( x, y ):
    unmatched = set(x.items()) ^ set(y.items())
    return len(unmatched) == 0


class Book:
    _id = ''
    title = ''
    author = ''
    added = ''
    finished = ''
    year = ''
    comments = ''
    rating = ''
    cost = ''
    times_read = 0
    attribs = ('_id','title','author','added','finished','year','comments','rating','cost','times_read')

    def toDict(self):
        obj = {}
        for key in self.attribs:
            if key.startswith('_'): #if user wants _id they can get it themselves
                continue
            val = self.__getattribute__(key)
            if val:
                obj[key] = val
        return obj

    def __init__(self,_id=None,title=None,author=None,added=None,finished=None,year=None,comments=None,rating=None,cost=None,times_read=None,_t=None):
        if _id:
            self._id = _id
        if title:
            self.title = title
        if author:
            self.author = author
        if added:
            self.added = added
        if finished:
            self.finished = finished
        if year:
            self.year = year
        if comments:
            self.comments = comments
        if rating:
            self.rating = rating
        if cost:
            self.cost = cost
        if times_read:
            self.times_read = times_read

    def __getitem__(self, key):
        if key not in self.attribs:
            return None
        return self.__getattribute__(key)

    def __setitem__(self, key, value):
        if key in self.attribs:
            self.__dict__[key] = value

    def __contains__(self, key):
        if key not in self.attribs:
            return False
        return True if self.__getattribute__(key) else False

    def __len__(self):
        length = 0
        for key in self.attribs:
            if self.__getattribute__(key):
                length = length + 1
        return length

    def keys(self):
        return self.attribs

    def items(self):
        a = []
        for key in self.attribs:
            val = self.__getattribute__(key)
            if val:
                a.append( {key:val} )
        return a

    def insert( self, db ):
        if self.check_exists(db):
            return False
        obj = {'_t':'book'}
        for i in self.attribs[1:]:
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        db.insert(obj)
        return True

    def check_exists( self, db ):
        obj = {'_t':'book'}
        for i in ('title','author','year'):
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        if not obj.get('title'): # not exist or unset. must have title.
            return False
        res = db.find(obj)
        return res.count() == 1

    def toString(self, index=' -', lists=[]):
        s = ''
        for i in Book.attribs:
            e = self.__getattribute__(i)
            if e:
                s = '{}{} {:11s}: {}\n'.format(s, (index if i=='_id' else ' -'), i, e)
        if lists and self._id is not None:
            list_names = []
            for lst in lists:
                if self._id in [ b['_id'] for b in lst['books'] ]:
                    list_names.append(lst['name'])
            if list_names:
                s = '{} - member of  : {}\n'.format(s, ', '.join(list_names))

        return s

    def shortString(self):
        s = '[{}]'.format(self._id) if self._id else ''
        s = '{} {}'.format(s, self.title)
        for i in ('author','year'):
            e = self.__getattribute__(i)
            if e:
                s = '{}{}'.format( s, (' - '+e) if s else e )
        return s


def new_book( title, args ):
    obj = {'_t':'book','title':title,'added':'now()'}
    if args:
        obj['author'] = args[0]
    if len(args) > 1:
        obj['year'] = args[1]
    if len(args) > 2:
        obj['comments'] = ' '.join(args[2:])

    for i in ('title','author','year','comments'):
        if i == 'title' and title:
            continue
        if i == 'author' and args:
            continue
        if i == 'year' and len(args) > 1:
            continue
        if i == 'comments' and len(args) > 2:
            continue
        rn = input('{} > '.format(i))
        if rn:
            obj[i] = rn

    b = Book(**obj)
    if not b.title:
        p( '** error: book must have at least a title ')
        return
    if not b.insert(db):
        p('"{}" already exists'.format(title))
        return
    db.save()

    qu = {'title':b.title}
    if b.author:
        qu['author'] = b.author
    if b.year:
        qu['year'] = b.year
    res = db.find(qu)
    if res.count() > 0:
        c = Book(**res.data[0])
        p('Adding:\n{}'.format(c.toString()) )

def book_from_index_title( title ):
    def from_title( title ):
        res = db.find({'_t':'book', 'title':title})
        if res.count() != 1:
            return False
        return Book( **res.data[0] )

    try:
        index = int(title)
    except:
        return from_title( title )

    res = db.find({'_t':'book', '_id':index})
    if res.count() != 1:
        return from_title( title )
    return Book( **res.data[0] )

def list_from_index_name( name ):
    def from_name( name ):
        res = db.find({'_t':'list', 'name':name})
        if res.count() != 1:
            return False
        return res.data[0]

    try:
        index = int(name)           # try to cast it
    except:
        return from_name( name )    # if not must be name or nothing

    res = db.find({'_t':'list', '_id':index})
    if res.count() != 1:
        return from_name( name )
    return res.data[0]

def add_book_to_list( title, args ):
    if not title:
        p( '** error: must provide a title')
        return
    if not args:
        p( '** error: must provide a list')
        return

    book_id = -1   # int
    List = {}   # dict

    # BOOK
    book = book_from_index_title( title )
    if not book:
        p('** error: book must be index or title')
        return
    book_id = book['_id']

    # FOR LISTS
    for arg in args:
        # LIST
        List = list_from_index_name( arg )
        if not List:
            p('** error: list must be index or name')
            return

        # see if the book is already in List
        for l in List['books']:
            if l['_id'] == book_id:
                p('** warning: "{}" is already in list "{}"'.format(book['title'],List['name']))
                continue

        List['books'].append({'_id':book_id})
        db.update({'_t':'list','name':List['name']},{'$set':{'books':List['books']}})
        db.save()
        p('"{}" added to "{}"'.format(book['title'], List['name']) )

def finish_book(title, args):
    # BOOk
    book = book_from_index_title( title )
    if not book:
        p('** error: book must be index or title')
        return
    book_id = book['_id']

    if book['finished']:
        p('"{}" already marked finished'.format(book['title']))
        if '-f' not in args:
            return
        p('-f set. forcing finish again')

    db.update({'_id':book_id},{'$set':{'finished':'now()','times_read':book['times_read']+1}})
    db.save()
    res = db.find({'_id':book_id})
    d = res.data[0]
    p( '"{}" marked finished on "{}"'.format(d['title'], d['finished']) )

def edit_book(title, args):
    # BOOk
    book = book_from_index_title( title )
    if not book:
        p('** error: book must be index or title')
        return

    for k in book.keys():
        if k == '_id':
            continue
        ans = input( '{:8} ["{}"] > '.format(k, book[k]))
        if ans:
            book[k] = ans.lstrip().rstrip()

    book2 = book_from_index_title( title )
    if objeq( book.toDict(), book2.toDict() ):
        p('no change')
        return

    sys.stdout.write('\n--> CHANGED BOOK <--:\n')
    for k in book.keys():
        if k not in book:
            continue
        p( '{:8} "{}"'.format(k, book[k]) )

    ans = input('replace? y/N > ')
    if ans.lower().startswith('y'):
        db.update({'_id':book['_id']},{'$set':book.toDict()}).save()
        res = db.find({'_id':book['_id']})
        p( '"{}" updated'.format(res.data[0]['title']) )
    else:
        p('skipping')

def delete_book(title):
    book = book_from_index_title( title )
    if not book:
        p('** error: book must be index or title')
        return

    db.remove({'_t':'book', '_id':book['_id']})
    res = db.find({'_id':book['_id']})
    if res.count() == 0:
        p( '"{}" removed successfully'.format( book['title'] ) )
    db.save()

def rm_book_from_list(title, args):
    book = book_from_index_title( title )
    if not book:
        p('** error: book must be index or title')
        return
    List = list_from_index_name( ' '.join(args) )
    if not List:
        p('** error: list must be index or name')
        return

    if book['_id'] not in [ b['_id'] for b in List['books'] ]:
        p( '"{}" not in "{}"'.format(book['title'], List['name']) )
        return

    ## remove elt
    for b in List['books']:
        if b['_id'] == book['_id']:
            List['books'].remove(b)
            break

    ## update & save
    db.update({'_id':List['_id']}, {'$set':{'books':List['books']}}).save()

    ## report
    p( '"{}" removed from "{}"'.format(book['title'], List['name']) )

def listadd(title, args):
    ## sanity check args
    o = {'_t':'list','books':[],'name':title}
    if not title:
        rn = input('name > ')
        if rn:
            o['name'] = rn.lstrip().rstrip()

    ## empty?
    if not o.get('name'):
        p('** error: list cant have empty name')
        return

    ## check if already exists
    res = db.find({'_t':'list','name':o['name']})
    if res.count() > 0:
        p('** error: list "{}" already exists'.format(o['name']))
        return

    ## confirm
    yn = input('sure you want to create new list "{}" y/N? '.format(o['name']))
    if not yn.lower().startswith('y'):
        p('bailing')
        return

    ## add it & save
    db.insert(o).save()

    ## report
    res = db.find({'_t':'list','name':o['name']})
    if res.data:
        p( 'list created: "[{}] {}"'.format(res.data[0]['_id'],res.data[0]['name']) )


def listchange(title, args):
    if not title:
        title = input('name > ')
        if not title:
            p('** error: what is the name of the list?')
            return

    List = list_from_index_name( title )
    if not List:
        p( '**error: list not found' )
        return

    orig = List['name']
    name = input( 'name ["{}"] > '.format(List['name']) )
    if not name or name == orig:
        p('not changed')
        return

    db.update({'_t':'list', '_id':List['_id']}, {'$set':{'name':name}}).save()
    p('list name change to "{}"'.format(name))


def show_unlisted(title, args):
    backwards = True if '-r' in title or '-r' in args else False
    longprint = True if '-l' in title or '-l' in args else False

    lists = db.find({"_t":"list"})
    ids = {""}
    for List in lists.data:
        for b in List['books']:
            ids.add(b['_id'])

    books = db.find({'_t':'book'})
    unlisted = [b for b in books.data if b['_id'] not in ids]

    iterate_over = reversed(unlisted) if backwards else unlisted
    for i, b in enumerate(iterate_over):
        bk = Book(**b)
        print_book( i, bk, longprint, lists )


def show_finished(title, args):
    backwards = True if '-r' in title or '-r' in args else False
    longprint = True if '-l' in title or '-l' in args else False

    lists = db.find({'_t':'list'})
    books = db.find({'_t':'book', 'finished':{'$exists':True}})
    iterate_over = reversed(books.data) if backwards else books.data
    for i, b in enumerate(iterate_over):
        bk = Book(**b)
        print_book( i, bk, longprint, lists )


def default_behavior(op, title, args):

    backwards = True if '-r' in title or '-r' in args else False
    longprint = True if '-l' in title or '-l' in args else False

    # if op is a list name, show the books in the list, optionally combining multiple lists
    Lists = db.find({'_t':'list'})
    sets = []
    names = []
    for r in Lists.data:
        if r['name'] == op.lower():
            ids = set()
            sets.append(ids)
            names.append(r['name'])
            for b in r['books']:
                ids.add(b['_id'])
        elif r['name'] == title:
            ids = set()
            sets.append(ids)
            names.append(r['name'])
            for b in r['books']:
                ids.add(b['_id'])
        elif r['name'] in args:
            for a in args:
                if r['name'] == a:
                    ids = set()
                    sets.append(ids)
                    names.append(r['name'])
                    for b in r['books']:
                        ids.add(b['_id'])

    ids = set()
    if title == '|' or '|' in args:
        operator = ' | '
        for s in sets:
            ids = ids.union(s)
    else:
        operator = ' & '
        if sets:
            ids = sets[0]
            for i in range(1, len(sets)):
                ids = ids.intersection( sets[i] )

    if ids or names:
        p('-' * 39)
        p('+ books in "{}"'.format(operator.join(names)))
        p('-' * 39)
        generator = reversed(sorted(ids)) if backwards else sorted(ids)
        for i, _id in enumerate( generator ):
            bb = db.find({'_id':_id})
            if bb.count():
                bk = Book(**bb.data[0])
                print_book( i, bk, longprint, Lists )

    # or show all lists
    elif op.lower() == 'all':
        list_of_lists = reversed(Lists.data) if backwards else Lists.data
        for r in list_of_lists:
            print_list( r, backwards, longprint, Lists )

    # or
    else:
        # look for list number, or book number
        List = list_from_index_name( op )
        if List:
            print_list( List, backwards, longprint, Lists )
        else:
            book = book_from_index_title( op )
            if book:
                print_book( 0, book, longprint, Lists )

            # or, fail all that,
            else:
                # try to match titles or authors
                match = re.compile('.*{}.*'.format(op), re.IGNORECASE)
                order = -1 if backwards else 1
                res = db.find({'_t':'book', '$or':[{'title':match},{'author':match}]}).sort({'_id':order})
                for i, bk in enumerate([Book(**b) for b in res.data]):
                    print_book( i, bk, longprint, Lists )

                if not res.data:
                    sys.stdout.write( '\n        **************' )
                    sys.stdout.write( '\n        ** no match **' )
                    sys.stdout.write( '\n        **************' )
                    print_help()


##
#
# entry point
#
#

if op == '-h' or op == '--help':
    print_help()
# show all books
elif op == 'books' or op == '-l':
    show_all_books( title, args )
# new book
elif op == 'new' or op == '-n':
    new_book( title, args )
# show lists
elif op == 'lists':
    res = db.find({'_t':'list'}).sort({'_id':1})
    for i, r in enumerate(res.data):
        p('{}: [{}] {}'.format( i+1, r['_id'], r['name'] ) )
# add book to list
elif op == 'add' or op == '-a':
    add_book_to_list( title, args )
# mark book finished
elif op == 'finish':
    finish_book(title, args)
elif op == 'edit':
    edit_book(title, args)
elif op == 'del':
    delete_book(title)
elif op == 'rm':
    rm_book_from_list(title, args)
elif op == 'listadd':
    listadd(title, args)
elif op == 'listchange':
    listchange(title, args)
elif op == 'unlisted':
    show_unlisted(title, args)
elif op == 'finished':
    show_finished(title, args)
elif op:
    default_behavior(op, title, args)
else:
    print_help()
