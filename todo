#!/usr/bin/env python3

"""
this is an app to keep track of my endlessly evolving todolists

Item:
    t: item
    title:
    comments:
    added:
    finished:

List:
    t: list
    name:
    comments:
    items: []

TODO
    X remove _id of finished item from all lists, by hand
    X finish_item() removes _id from all lists, and writes a
        record of what list_id it belonged to "member_of": []
    X pyQueryable should catch bad json error, and not overwrite with
        and empty file, which erases the entire thing! == Baddddd!
    - fix list print ordering everywhere
        - again, put all List Printing into a single place,
            probably "class List:"
        - want: lists can have 0-N alternate names (eg. programming|coding)
    - put all Item formatting into a single toString() method, that
        produces "[{}] {}".format(_id,title)
    - put the print_item() function inside the Item class
    - fix input flags. Write early pass that processes all args early and
        produces a Class object with all settings that can be passed
        - keep list of all possible flags, and prevent Item and List
            being created with the same name
    - all output modes should print a header,
        so you know which codepath it went down
    - support for chained dependencies, meaning:
        put a chain member in Item, with a list of (item_id,list_id)
        - when the item is finished, it can run down the list and add
          every item_id to its list_id. And print a message that such and
          such has been Initialized in such-and-such a List.
    - global date formatting, (except in edit_item)

Ideas:
- how can I improve item aggregation?
    - automatic id erosion due to time decay?
"""

import sys, os, json, re, random

TODO_PATH = '/home/{}/Private/logs/databases/todo.json'.format(os.environ['USER'])
QUERYABLE_PATH = '/home/{}/code/pyqueryable'.format(os.environ['USER'])

sys.path.append(QUERYABLE_PATH)
from Queryable import db_object

# globals
p    = lambda X: print( str(X) )
db   = db_object(path=TODO_PATH, jsonarg={'sort_keys':True,'indent':2}).load()
config = {}


def print_item( i, item, longprint, Lists ):
    if longprint:
        p(item.toString(index='{}:'.format(i), lists=Lists.data))
    else:
        p('{}: {}'.format((i), item.shortString()))

def print_list( r, backwards, longprint, Lists ):
    p('-' * 39)
    p('+ items in "{}"'.format(r['name']))
    p('-' * 39)
    generator = reversed(r['items']) if backwards else r['items']
    for i, b in enumerate( generator ):
        bb = db.find({'_id':b['_id']})
        if bb.count():
            bk = Iook(**bb.data[0])
            print_item( i, bk, longprint, Lists )


def show_all_items( title, args ):
    order = 1 if title == '-r' or '-r' in args else -1
    res = db.find({'_t':'item', 'finished':{'$exists':False}}).sort({'added':order})
    lists = db.find({'_t':'list'}).sort({'name':1})
    longprint = True if title == '-l' or '-l' in args else False

    for index, item in ((i, Item(**r)) for i, r in enumerate(res.data[:LIST_LIMIT])):
        print_item( index, item, longprint, lists )


def show_now_items( title, args ):
    lists = db.find({'_t':'list','name':'now'}).sort({'name':1})
    items = lists.data[0]['items']

    backwards = True if title == '-r' or '-r' in args else False
    longprint = True if title == '-l' or '-l' in args else False

    res = db.find({'_t':'item','finished':{'$exists':False},'_id':{'$in':items}})

    # order of items determines order printed
    items = list(reversed(items) if backwards else items)
    index = 0
    for _id in items:
        for it in res.data:
            if it['_id'] == _id:
                print_item( index, Item(**it), longprint, lists )
                index += 1
                break
        if index >= LIST_LIMIT:
            break

# object equal
def objeq( x, y ):
    unmatched = set(x.items()) ^ set(y.items())
    return len(unmatched) == 0

def item_from_index_title( title ):
    def from_title( title ):
        res = db.find({'_t':'item', 'title':title})
        if res.count() != 1:
            return False
        return Item( **res.data[0] )

    try:
        index = int(title)
    except:
        return from_title( title )

    res = db.find({'_t':'item', '_id':index})
    if res.count() != 1:
        return from_title( title )
    return Item( **res.data[0] )

def list_from_index_name( name ):
    def from_name( name ):
        res = db.find({'_t':'list', 'name':name})
        if res.count() != 1:
            return False
        return res.data[0]

    try:
        index = int(name)           # try to cast it
    except:
        return from_name( name )    # if not must be name or nothing

    res = db.find({'_t':'list', '_id':index})
    if res.count() != 1:
        return from_name( name )
    return res.data[0]


class Item:
    # dates
    title = ''
    added = ''
    finished = ''
    comments = ''
    member_of = []
    index = 0           # 0 is no index, not set
    _t = ''
    _id = ''
    attribs = ('_id', 'title', 'added', 'finished', 'comments', 'index')

    def __init__(self,title=None, added=None, finished=None, comments=None, member_of=None, index=None,_t=None,_id=None):
        if title:
            self.title = title
        if added:
            self.added = added
        if finished:
            self.finished = finished
        if comments:
            self.comments = comments
        if member_of:
            self.member_of = member_of
        if index:
            self.index = index
        if _t:
            self._t = _t
        if _id:
            self._id = _id

    #
    # dictionary-like interfaces
    #
    def __getitem__(self, key):
        if key not in self.attribs:
            return None
        return self.__getattribute__(key)

    def __setitem__(self, key, value):
        if key in self.attribs:
            self.__dict__[key] = value

    def __contains__(self, key):
        if key not in self.attribs:
            return False
        return True if self.__getattribute__(key) else False

    def __len__(self):
        length = 0
        for key in self.attribs:
            if self.__getattribute__(key):
                length = length + 1
        return length

    def keys(self):
        return self.attribs

    def items(self):
        a = []
        for key in self.attribs:
            val = self.__getattribute__(key)
            if val:
                a.append( {key:val} )
        return a

    def toDict(self):
        obj = {}
        for key in self.attribs:
            if key.startswith('_'): #if user wants _id they can get it themselves
                continue
            val = self.__getattribute__(key)
            if val:
                obj[key] = val
        return obj


    #
    # accessors
    #
    def insert( self, db ):
        if self.check_exists(db):
            return False
        obj = {'_t':'item'}
        for i in self.attribs[1:]:
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        db.insert(obj)
        return True

    def check_exists( self, db ):
        obj = {'_t':'item'}
        for i in ['title']:
            e = self.__getattribute__(i)
            if e:
                obj[i] = e
        if not obj.get('title'): # not exist or unset. must have title.
            return False
        res = db.find(obj)
        return res.count() == 1

    def toString(self, index=' -', lists=[]):
        s = ''
        for i in Item.attribs:
            e = self.__getattribute__(i)
            if e:
                s = '{}{} {:11s}: {}\n'.format(s, (index if i=='_id' else '  '), i, e)
        if lists and self._id is not None:
            list_names = []
            for lst in lists:
                if self._id in lst['items']:
                    list_names.append(lst['name'])
            if list_names:
                s = '{}   member of  : {}\n'.format(s, ', '.join(list_names))
        return s

    def shortString(self):
        s = '[{}]'.format(self._id) if self._id else ''
        s = '{}{} {}'.format('F=' if self.finished else '', s, self.title)
#        for i in ('author','year'):
#            e = self.__getattribute__(i)
#            if e:
#                s = '{}{}'.format( s, (' - '+e) if s else e )
        return s


def new_item( title, args ):
    obj = {'_t':'item', 'title':title, 'added':'now()'}

    comments = False
    if args and args[0] != '--lists':
        obj['comments'] = comments = args[0]
        args.pop(0)

    for i in ['title','comments']:
        if (i == 'title' and title) or (i == 'comments' and comments):
            continue
        rn = input('{} > '.format(i))
        if rn:
            obj[i] = rn

    b = Item(**obj)
    if not b.title:
        p( 'item must have at least a title ')
        return
    if not b.insert(db):
        p('"{}" already exists'.format(b.title))
        return
    db.save()

    res = db.find({'_t':'item','title':b.title})
    if res.count() > 0:
        c = Item(**res.data[0])
        p('Adding:\n{}'.format(c.toString()) )

        if len(args) > 1 and args[0] == '--lists':
            lists = args[1].split(',') # Comma-separated list of listnames, no spaces
            add_item_to_list(c._id, lists)

def edit_item(title, args):
    item = item_from_index_title( title )
    if not item:
        p('** error: item must be index or title')
        return

    for k in item.keys():
        if k.startswith('_'):
            continue
        ans = input( '{:8} ["{}"] > '.format(k, item[k]))
        if ans:
            item[k] = ans.lstrip().rstrip()

    item2 = item_from_index_title( title )
    if objeq( item.toDict(), item2.toDict() ):
        p('no change')
        return

    sys.stdout.write('\n--> CHANGED ITEM <--:\n')
    for k in item.keys():
        if k not in item:   # in operator returns False here if member is 'falsey'
            continue
        p( '{:8} "{}"'.format(k, item[k]) )

    ans = input('replace? y/N > ')
    if ans.lower().startswith('y'):
        db.update({'_id':item['_id']},{'$set':item.toDict()}).save()
        res = db.find({'_id':item['_id']})
        p( '"{}" updated'.format(res.data[0]['title']) )
    else:
        p('skipping')


def add_item_to_list( title, args ):
    if not title:
        p( 'must provide a title')
        return
    if not args:
        p( 'must provide a list')
        return

    item_id = -1   # int
    List = {}   # dict

    # ITEM
    item = item_from_index_title( title )
    if not item:
        p('** error: item must be index or title')
        return
    item_id = item['_id']

    # FOR LISTS
    for arg in args:
        # LIST
        List = list_from_index_name( arg )
        if not List:
            p('** error: list must be index or name')
            return

        # see if the item is already in List
        if item_id in List['items']:
            p('** warning: "{}" is already in list "{}"'.format(item['title'],List['name']))
        else:
            List['items'].append(item_id)
            db.update({'_t':'list','name':List['name']},{'$set':{'items':List['items']}})
            db.save()
            p('"[{}] {}" added to "{}"'.format(item['_id'],item['title'], List['name']) )


def finish_item(title):
    item = item_from_index_title( title )
    if not item:
        p('** error: item must be index or title')
        return
    item_id = item['_id']

    if item['finished']:
        p('"{}" already marked finished'.format(item['title']))
        return

    db.update({'_id':item_id},{'$set':{'finished':'now()'}}).save()
    res = db.find({'_id':item_id})
    d = res.data[0]
    p( '"{}" marked finished on "{}"'.format(d['title'],d['finished']) )

    # remove item from all lists it was a member of,
    lists = db.find({"_t":"list"})
    member_of = []
    for L in lists.data:
        if item_id in L['items']:
            L['items'].remove(item_id)
            db.update({"_id":L["_id"]}, {'$set':{'items':L['items']}}).save()
            member_of.append(L['_id'])
    if member_of:
        db.update({'_id':item_id},{'$set':{'member_of':member_of}}).save()

def default_action(op, title, args):

    backwards = True if '-r' in op or '-r' in title or '-r' in args else False
    longprint = True if '-l' in op or '-r' in title or '-l' in args else False

    if '-r' in op or '-l' in op:
        op = ''
    if '-r' in title or '-l' in title:
        title = ''
    for flag in ('-l','-r'):
        if flag in args:
            args.remove(flag)

    # if op is a list name, show the items in the list
    if not op and not title:
        f = config.get('default_action')
        f = globals().get(f)
        a = config.get('default_args')
        targs = args + (['-r'] if backwards else []) + (['-l'] if longprint else [])
        if f and a == 3:
            f(op, title, targs)
        elif f and a == 2:
            f(title, targs)
        elif f and a == 0:
            f()
        else:
            p('no default action set')
        return

    # if op is a list name, show the items in the list, optionally combining multiple lists
    Lists = db.find({'_t':'list'})
    sets = []
    names = []
    for r in Lists.data:
        if r['name'] == op.lower():
            ids = set()
            sets.append(ids)
            names.append(r['name'])
            for b in r['items']:
                ids.add(b)
        elif r['name'] == title:
            ids = set()
            sets.append(ids)
            names.append(r['name'])
            for b in r['items']:
                ids.add(b)
        elif r['name'] in args:
            for a in args:
                if r['name'] == a:
                    ids = set()
                    sets.append(ids)
                    names.append(r['name'])
                    for b in r['items']:
                        ids.add(b)

    ids = set()
    if title == '|' or '|' in args:
        operator = ' | '
        for s in sets:
            ids = ids.union(s)
    else:
        operator = ' & '
        if sets:
            ids = sets[0]
            for i in range(1, len(sets)):
                ids = ids.intersection( sets[i] )

    if ids or names:
        p('-' * 39)
        p('+ items in "{}"'.format(operator.join(names)))
        p('-' * 39)
        generator = reversed(sorted(ids)) if backwards else sorted(ids)
        for i, _id in enumerate( generator ):
            bb = db.find({'_id':_id})
            if bb.count():
                bk = Item(**bb.data[0])
                print_item( i, bk, longprint, Lists )

    # or show all lists
    elif op.lower() == 'all':
        list_of_lists = reversed(Lists.data) if backwards else Lists.data
        for r in list_of_lists:
            print_list( r, backwards, longprint, Lists )
    # or
    else:
        # look for list number, or item number
        List = list_from_index_name( op )
        if List:
            print_list( List, backwards, longprint, Lists )
        else:
            item = item_from_index_title( op )
            if item:
                print_item( 0, item, longprint, Lists )

            # or, fail all that,
            else:
                # try to match titles or authors
                match = re.compile('.*{}.*'.format(op), re.IGNORECASE)
                order = -1 if backwards else 1
                res = db.find({'_t':'item', '$or':[{'title':match},{'author':match}]}).sort({'_id':order})
                for i, bk in enumerate([Item(**b) for b in res.data]):
                    print_item( i, bk, longprint, Lists )

                if not res.data:
                    sys.stdout.write( '\n        **************' )
                    sys.stdout.write( '\n        ** no match **' )
                    sys.stdout.write( '\n        **************\n\n' )
                    print_help()


def listadd(title, args):
    ## sanity check args
    o = {'_t':'list','items':[],'name':title}
    if not title:
        rn = input('name > ')
        if rn:
            o['name'] = rn.lstrip().rstrip()

    ## empty?
    if not o.get('name'):
        p('** error: list cant have empty name')
        return

    ## check if already exists
    res = db.find({'_t':'list','name':o['name']})
    if res.count() > 0:
        p('** error: list "{}" already exists'.format(o['name']))
        return

    ## confirm
    yn = input('sure you want to create new list "{}" y/N? '.format(o['name']))
    if not yn.lower().startswith('y'):
        p('bailing')
        return

    ## add it & save
    db.insert(o).save()

    ## report
    res = db.find({'_t':'list','name':o['name']})
    if res.data:
        p( 'list created: "[{}] {}"'.format(res.data[0]['_id'],res.data[0]['name']) )

def print_lists():
    res = db.find({'_t':'list'}).sort({'_id':1})
    for i, r in enumerate(res.data):
        p('{}: [{}] {}'.format( i+1, r['_id'], r['name'] ) )


def show_unlisted(title, args):
    backwards = True if '-r' in title or '-r' in args else False
    longprint = True if '-l' in title or '-l' in args else False
    show_fini = True if '--show-finished' in title or '--show-finished' in args else False

    lists = db.find({"_t":"list"})
    ids = {""}
    for List in lists.data:
        for b in List['items']:
            ids.add(b)

    criteria = {'_t':'item'}
    if not show_fini:
        criteria['finished'] = {'$exists':False}
    items = db.find(criteria)
    unlisted = [b for b in items.data if b['_id'] not in ids]

    iterate_over = reversed(unlisted) if backwards else unlisted
    for i, b in enumerate(iterate_over):
        bk = Item(**b)
        print_item( i, bk, longprint, lists )


def show_finished(title, args):
    backwards = True if '-r' in title or '-r' in args else False
    longprint = True if '-l' in title or '-l' in args else False

    lists = db.find({'_t':'list'})
    items = db.find({'_t':'item', 'finished':{'$exists':True}})
    iterate_over = reversed(items.data) if backwards else items.data
    for i, b in enumerate(iterate_over):
        bk = Item(**b)
        print_item( i, bk, longprint, lists )


def listchange(title, args):
    if not title:
        title = input('name > ')
        if not title:
            p('** error: what is the name of the list?')
            return

    List = list_from_index_name( title )
    if not List:
        p( '**error: list not found' )
        return

    orig = List['name']
    name = input( 'name ["{}"] > '.format(List['name']) )
    if not name or name == orig:
        p('not changed')
        return

    db.update({'_t':'list', '_id':List['_id']}, {'$set':{'name':name}}).save()
    p('list name change to "{}"'.format(name))


def delete_item(title):
    item = item_from_index_title( title )
    if not item:
        p('** error: item must be index or title')
        return

    ans = input('delete: "[{}] {}"? y/N > '.format(item._id, item.title))
    if ans.lower().startswith('y'):
        db.remove({'_t':'item', '_id':item['_id']})
        res = db.find({'_id':item['_id']})
        if res.count() == 0:
            p( "\nRemoved successfully".format( item['title'] ) )
        db.save()
    else:
        p("aborted deletion")

def rm_item_from_list(title, args):
    item = item_from_index_title( title )
    if not item:
        p('** error: item must be index or title')
        return
    List = list_from_index_name( ' '.join(args) )
    if not List:
        p('** error: list must be index or name')
        return

    if item['_id'] not in List['items']:
        p( '"{}" not in "{}"'.format(item['title'], List['name']) )
        return

    ## remove elt
    for b in List['items']:
        if b == item['_id']:
            List['items'].remove(b)
            break

    ## update & save
    db.update({'_id':List['_id']}, {'$set':{'items':List['items']}}).save()

    ## report
    p( '"{}" removed from "{}"'.format(item['title'], List['name']) )

def mv_item(title, args):
    usage = """ usage: todo mv list item_id new_index """
    List = list_from_index_name( title )
    if not List:
        p('** error: list must be index or name')
        p(usage)
        return
    items = List['items']

    item = item_from_index_title( args[0] )
    if not item:
        p('** error: item must be index or title')
        p(usage)
        return

    new_index = int(args[1])

    current_index = items.index( item._id )
    if current_index == new_index:
        p('** warning: specified index not different than current')
        p(usage)
        return

    # remove current from list
    items.remove( item._id )
    # insert into new spot
    items.insert(new_index, item._id )

    db.update({'_id':List['_id']}, {'$set':{'items':items}}).save()

    p( 'In list: "{}", moved Item: "[{}] {}", to Index: "{}"'.format(List['name'],item['_id'],item['title'],new_index) )


def load_config():
    res = db.find({'_t':'config'})
    if res.count() == 0:
        p('Error: no config!')
        sys.exit(0)

    global config
    config = res.data[0].get('settings', {})

def set_defaults():
    global op
    global LIST_LIMIT
    global title
    global args
    z = 1000000
    D = LIST_LIMIT = config.get( 'default_rows', z )
    if '--limit' == op:
        op = ''
        LIST_LIMIT = title
        title = ''
    elif '--limit' == title:
        LIST_LIMIT = args.pop(0)
        title = ''
    elif '--limit' in args:
        i = args.index('--limit')
        args.pop(i)
        LIST_LIMIT = args.pop(i)

    try:
        LIST_LIMIT = int(LIST_LIMIT)
    except:
        LIST_LIMIT = D


def print_help():
    p("""Usage:
  --help, -h              show this help
  all                     show all items
  new    [-n]             add a new item
  edit   [-e]             edit item
  add    [-a]             add a item to a list
  listadd                 add a new list
  lists                   show all lists
  finish [-f]             mark an  item finished
  finished                show the items that have been finished
  unlisted                show items that are not in a list
  listchange              edit a list
  del                     delete an item completely
  rm <itm> <list>         remove item from list
  mv <lst> <_id> <index>  In a List, move an item to a new index

  default:
    [list_name]           show items in a list of matching: list_name

  general:
    --limit N             limit number of results returned in listing queries
    --lists ls1,ls2       When creating new Item, include it in lists
    -l                    long print format
    -r                    reverse order
    --show-finished       show_unlisted will not show finished w/o this flag
""")


##############################################
#
# entry point
#
##############################################

# arguments
op   = sys.argv[1:2]
op = '' if len(op) == 0 else op.pop().lower()
title = sys.argv[2:3]
title = '' if len(title) == 0 else title.pop()
args = sys.argv[3:]

load_config()

set_defaults()

reserved = ('-h','--help','all','-a','new','-n','edit','-e','add','listadd','lists','finish','finished','unlisted','listchange','del','rm','mv')

if op == '-h' or op == '--help':
    print_help()
elif op == 'all' or op == '-a':         # show all items
    LIST_LIMIT = 1000000
    show_all_items( title, args )
elif op == 'new' or op == '-n':         # new item
    new_item( title, args )
elif op == 'edit' or op == '-e':
    edit_item(title, args)
elif op == 'add':                       # add item to list
    add_item_to_list( title, args )
elif op == 'listadd':
    listadd(title, args)
elif op == 'lists':                     # show lists
    print_lists()
elif op == 'finish' or op == '-f':      # mark item finished
    finish_item(title)
elif op == 'finished':
    show_finished(title, args)
elif op == 'unlisted':
    show_unlisted(title, args)
elif op == 'listchange':
    listchange(title, args)
elif op == 'del':
    delete_item(title)
elif op == 'rm':
    rm_item_from_list(title, args)
elif op == 'mv':
    mv_item(title, args)
else:
    default_action(op, title, args)

